lua_shared_dict register_dict 100m;
lua_shared_dict save_dict 100m;
lua_shared_dict maintance_dict 1m;

init_by_lua_block {
  require "resty.core"

  cjson = require("cjson")
  limit_count = require "resty.limit.count"

  function log_info(request_path, msg_desc, msg_body)
    ngx.log(ngx.INFO, cjson.encode({
      path = request_path,
      description = msg_desc,
      details = msg_body
      })
    )
  end

  function log_notification(request_path, notify_desc, notify_body)
    ngx.log(ngx.ALERT, cjson.encode({
      path = request_path,
      description = notify_desc,
      details = notify_body
      })
    )
  end

  function log_error(request_path, error_desc, error_body)
    ngx.log(ngx.CRIT, cjson.encode({
      path = request_path,
      description = error_desc,
      details = error_body
      })
    )
  end

  function log_visit(request_path, fingerprints)
    local output_table = {
      path = request_path,
      msg = "visited",
      err = "nil"
    }
    -- Merge all fingerprint's data into output_table
    for k,v in pairs(fingerprints) do
      output_table[k] = v 
    end

    log_info(
      request_path,
      "Visit data",
      output_table
    )
  end

  function limit_check(lim, request_path, fingerprints)
    local check_result = {
      is_error = false,
      error_msg = nil,
      should_block = false,
      fingerprint = nil
    }

    for _, fp in ipairs(fingerprints) do
      local delay, err = lim:incoming(fp.value, true)

      log_info(
        request_path,
        "Limit check data",
        {
          path = request_path,
          key = fp.type,
          value = fp.value,
          msg = "checked",
          counter = err
        }
      )

      if delay == nil and err ~= "rejected" then
        check_result.is_error = true
        check_result.error_msg = err
        check_result.fingerprint = fp
        break
      elseif delay == nil and err == "rejected" and check_result.should_block == false then
        check_result.should_block = true
        check_result.fingerprint = fp 
      end

    end

    return check_result
  end

  function limit_spam_requests(request_path, dict_name, requests_limit, time_limit, fingerprints)
    local lim, err_init = limit_count.new(dict_name, requests_limit, time_limit)

    if not lim then
      log_error(
        request_path,
        "Failed to instantiate a resty.limit.count object",
        {
          err = err_init
        }
      )
      return ngx.exit(500)
    end

    log_visit(request_path, fingerprints)

    local limit_check_result = limit_check(
      lim,
      request_path,
      fingerprints
    )

    if limit_check_result.is_error then
      log_error(
        request_path,
        "Failed to limit count",
        {
          error_fingerprint_type = limit_check_result.fingerprint.type,
          err = limit_check_result.error_msg
        }
      )
      return ngx.exit(500)
    elseif limit_check_result.should_block then
      log_notification(
        request_path,
        "User is blocked",
        {
          type = limit_check_result.fingerprint.type,
          value = limit_check_result.fingerprint.value
        }
      )
      ngx.header["content-type"] = "application/json;charset=UTF-8"
      ngx.status = 429
      ngx.say('{"status": "fail","data": {},"message": "Request rate limit exceeded, try again later."}')
      return ngx.exit(429)
    end
  end
}

server {
  listen 80;

  server_name _;

  location / {
    lua_need_request_body on;
    access_by_lua_block {
      local request_path = ngx.var.request_uri

      local requests_limit = 3
      local time_limit = 3600
      local shared_dict = "register_dict"

      local fingerprints = {
        {
          type = "remote_ip",
          value = ngx.var.remote_addr
        }
      }

      local request_headers = ngx.req.get_headers()

      if request_headers["X-API-Key"] ~= nil then
        fingerprints[#fingerprints + 1] = {
            type = "api_key",
            value = request_headers["X-API-Key"]
          }
      end

      limit_spam_requests(request_path, shared_dict, requests_limit, time_limit, fingerprints)
    }
  }
}
